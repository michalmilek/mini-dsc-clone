// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  senderInvitations   FriendInvitation[] @relation("Sender")
  receiverInvitations FriendInvitation[] @relation("Receiver")

  serverSenderInvitations   ServerInvitation[] @relation("ServerInvitationSender")
  serverReceiverInvitations ServerInvitation[] @relation("ServerInvitationReceiver")

  friendOne ConversationBetweenFriends[] @relation("FriendOne")
  friendTwo ConversationBetweenFriends[] @relation("FriendTwo")

  directMessagesBetweenFriends DirectMessageBetweenFriends[]

  servers  Server[]
  members  Member[]
  channels Channel[]

  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FriendInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model FriendInvitation {
  id       String  @id @default(uuid())
  senderId String
  sender   Profile @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   Profile @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  status FriendInvitationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model ConversationBetweenFriends {
  id String @id @default(uuid())

  friendOneId String
  friendOne   Profile @relation("FriendOne", fields: [friendOneId], references: [id], onDelete: Cascade)

  friendTwoId String
  friendTwo   Profile @relation("FriendTwo", fields: [friendTwoId], references: [id], onDelete: Cascade)

  directMessagesBetweenFriends DirectMessageBetweenFriends[]
  createdAt                    DateTime                      @default(now())
  updatedAt                    DateTime                      @updatedAt

  @@unique([friendOneId, friendTwoId])
  @@index([friendOneId])
  @@index([friendTwoId])
}

model DirectMessageBetweenFriends {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text
  seen    Boolean @default(false)

  friendId String
  friend   Profile @relation(fields: [friendId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   ConversationBetweenFriends @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([friendId])
  @@index([conversationId])
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members           Member[]
  channels          Channel[]
  serverInvitations ServerInvitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model ServerInvitation {
  id   String @id @default(uuid())

  senderId String
  sender   Profile @relation("ServerInvitationSender", fields: [senderId], references: [id])

  receiverId String
  receiver   Profile @relation("ServerInvitationReceiver", fields: [receiverId], references: [id])

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  status FriendInvitationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId, receiverId, serverId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}


model Reaction {
  id        String   @id @default(uuid())
  emoji     String   
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
  @@index([profileId])
}